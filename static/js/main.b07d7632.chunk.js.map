{"version":3,"sources":["components/Navbar.js","views/Home.js","views/AboutMe.js","views/Projects.js","views/Contact.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","toggle","bind","state","isOpen","this","setState","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","React","Component","Home","Card","body","style","backgroundColor","borderColor","CardTitle","CardText","AboutMe","Projects","Contact","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oVAUqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,MAAQ,CACXC,QAAQ,GALO,E,sEASjBC,KAAKC,SAAS,CACZF,QAASC,KAAKF,MAAMC,W,+BAItB,OACE,6BACE,kBAACG,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MACjC,kBAACC,EAAA,EAAD,CAAaC,KAAK,aAAlB,aACA,kBAACC,EAAA,EAAD,CAAeC,QAAST,KAAKJ,SAC7B,kBAACc,EAAA,EAAD,CAAUX,OAAQC,KAAKF,MAAMC,OAAQY,QAAM,GACzC,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC7B,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,KAAK,SAAd,WAEF,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,KAAK,YAAd,aAEF,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,KAAK,aAAd,cAEF,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,KAAK,YAAd,aAEF,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,KAAK,OAAd,e,GAnCwBS,IAAMC,W,wBCI/BC,EAXF,SAACvB,GACZ,OACE,6BACE,kBAACwB,EAAA,EAAD,CAAMC,MAAI,EAACC,MAAO,CAAEC,gBAAiB,OAAQC,YAAa,SACtD,kBAACC,EAAA,EAAD,mBACA,kBAACC,EAAA,EAAD,+CCLWC,E,iLAEb,OACI,kBAACP,EAAA,EAAD,CAAMC,MAAI,EAACC,MAAO,CAAEC,gBAAiB,SAAUC,YAAa,SAC5D,kBAACC,EAAA,EAAD,KACI,gDAIJ,kBAACC,EAAA,EAAD,0B,GATyBT,IAAMC,WCAtBU,E,iLAEb,OACI,kBAACR,EAAA,EAAD,CAAMC,MAAI,EAACC,MAAO,CAAEC,gBAAiB,SAAUC,YAAa,SAC5D,kBAACC,EAAA,EAAD,KACI,iDAIJ,kBAACC,EAAA,EAAD,2B,GAT0BT,IAAMC,WCAvBW,E,iLAEb,OACI,kBAACT,EAAA,EAAD,CAAMC,MAAI,EAACC,MAAO,CAAEC,gBAAiB,SAAUC,YAAa,SAC5D,kBAACC,EAAA,EAAD,KACI,gDAIJ,kBAACC,EAAA,EAAD,0B,GATyBT,IAAMC,WCuB5BY,MAlBf,WACE,OACE,yBAAKhB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,OAEF,6BACE,kBAAC,EAAD,OAEF,8BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCRYiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b07d7632.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink } from 'reactstrap';\n\nexport default class Navigation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      isOpen: false\n    };\n  }\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Navbar color=\"light\" light expand=\"md\">\n          <NavbarBrand href=\"/Projects\">Proyectos</NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink href=\"/Home\">Inicio</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"/AboutMe\">Sobre mi</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"/Projects\">Proyectos</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"/Contact\">Contacto</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"/CV\">CV</NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Card, CardTitle, CardText } from 'reactstrap';\n\nconst Home = (props) => {\n  return (\n    <div>\n      <Card body style={{ backgroundColor: '#333', borderColor: '#333' }}>\n          <CardTitle>PORTAFOLIO</CardTitle>\n          <CardText>Portfolio about Scarlette Project's</CardText>\n      </Card>\n    </div>\n  );\n};\n\nexport default Home;","import React from 'react';\nimport { Card, CardTitle, CardText } from 'reactstrap';\n\nexport default class AboutMe extends React.Component {\n    render() {\n        return (\n            <Card body style={{ backgroundColor: '#fffff', borderColor: '#333' }}>\n            <CardTitle>\n                <h3>\n                AboutMe Section\n                </h3>\n            </CardTitle>\n            <CardText>AboutMe Text</CardText>\n            </Card>\n        )\n    }\n}","import React from 'react';\nimport { Card, CardTitle, CardText } from 'reactstrap';\n\nexport default class Projects extends React.Component {\n    render() {\n        return (\n            <Card body style={{ backgroundColor: '#fffff', borderColor: '#333' }}>\n            <CardTitle>\n                <h3>\n                    Projects Section\n                </h3>\n            </CardTitle>\n            <CardText>Projects Text</CardText>\n            </Card>\n        )\n    }\n}","import React from 'react';\nimport { Card, CardTitle, CardText } from 'reactstrap';\n\nexport default class Contact extends React.Component {\n    render() {\n        return (\n            <Card body style={{ backgroundColor: '#fffff', borderColor: '#333' }}>\n            <CardTitle>\n                <h3>\n                    Contact Section\n                </h3>\n            </CardTitle>\n            <CardText>Contact Text</CardText>\n            </Card>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Home from './views/Home'\nimport AboutMe from './views/AboutMe'\nimport Projects from './views/Projects';\nimport Contact from './views/Contact';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Home/>\n      </header>\n      <nav>\n        <Navbar/>\n      </nav>\n      <body>\n        <AboutMe/>\n        <Projects/>\n        <Contact/>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}